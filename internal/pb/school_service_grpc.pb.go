// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: school_service.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchoolService_Register_FullMethodName   = "/school.v1.SchoolService/Register"
	SchoolService_Config_FullMethodName     = "/school.v1.SchoolService/Config"
	SchoolService_EditSchool_FullMethodName = "/school.v1.SchoolService/EditSchool"
	SchoolService_EditConfig_FullMethodName = "/school.v1.SchoolService/EditConfig"
	SchoolService_Suspend_FullMethodName    = "/school.v1.SchoolService/Suspend"
)

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Config(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	EditSchool(ctx context.Context, in *EditSchoolRequest, opts ...grpc.CallOption) (*SimpleRequest, error)
	EditConfig(ctx context.Context, in *EditConfigRequest, opts ...grpc.CallOption) (*SimpleRequest, error)
	Suspend(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type schoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolServiceClient(cc grpc.ClientConnInterface) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, SchoolService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) Config(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, SchoolService_Config_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) EditSchool(ctx context.Context, in *EditSchoolRequest, opts ...grpc.CallOption) (*SimpleRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleRequest)
	err := c.cc.Invoke(ctx, SchoolService_EditSchool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) EditConfig(ctx context.Context, in *EditConfigRequest, opts ...grpc.CallOption) (*SimpleRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleRequest)
	err := c.cc.Invoke(ctx, SchoolService_EditConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) Suspend(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, SchoolService_Suspend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
// All implementations must embed UnimplementedSchoolServiceServer
// for forward compatibility.
type SchoolServiceServer interface {
	Register(context.Context, *RegisterRequest) (*SimpleResponse, error)
	Config(context.Context, *SimpleRequest) (*ConfigResponse, error)
	EditSchool(context.Context, *EditSchoolRequest) (*SimpleRequest, error)
	EditConfig(context.Context, *EditConfigRequest) (*SimpleRequest, error)
	Suspend(context.Context, *SimpleRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSchoolServiceServer()
}

// UnimplementedSchoolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchoolServiceServer struct{}

func (UnimplementedSchoolServiceServer) Register(context.Context, *RegisterRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSchoolServiceServer) Config(context.Context, *SimpleRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedSchoolServiceServer) EditSchool(context.Context, *EditSchoolRequest) (*SimpleRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSchool not implemented")
}
func (UnimplementedSchoolServiceServer) EditConfig(context.Context, *EditConfigRequest) (*SimpleRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConfig not implemented")
}
func (UnimplementedSchoolServiceServer) Suspend(context.Context, *SimpleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (UnimplementedSchoolServiceServer) mustEmbedUnimplementedSchoolServiceServer() {}
func (UnimplementedSchoolServiceServer) testEmbeddedByValue()                       {}

// UnsafeSchoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServiceServer will
// result in compilation errors.
type UnsafeSchoolServiceServer interface {
	mustEmbedUnimplementedSchoolServiceServer()
}

func RegisterSchoolServiceServer(s grpc.ServiceRegistrar, srv SchoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchoolService_ServiceDesc, srv)
}

func _SchoolService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).Config(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_EditSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).EditSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_EditSchool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).EditSchool(ctx, req.(*EditSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_EditConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).EditConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_EditConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).EditConfig(ctx, req.(*EditConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_Suspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).Suspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_Suspend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).Suspend(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolService_ServiceDesc is the grpc.ServiceDesc for SchoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "school.v1.SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SchoolService_Register_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _SchoolService_Config_Handler,
		},
		{
			MethodName: "EditSchool",
			Handler:    _SchoolService_EditSchool_Handler,
		},
		{
			MethodName: "EditConfig",
			Handler:    _SchoolService_EditConfig_Handler,
		},
		{
			MethodName: "Suspend",
			Handler:    _SchoolService_Suspend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school_service.proto",
}
